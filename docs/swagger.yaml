openapi: 3.0.0
info:
  title: Jobsy API
  version: "1.0.0"
  description: API для регистрации, входа, подтверждения e-mail, восстановления пароля и управления профилями фрилансера и заказчика.
tags:
  - name: auth
    description: Вход, регистрация, авторизация, подтверждение e-mail и восстановление пароля
  - name: freelancer
    description: Эндпоинты для работы с профилем фрилансера и его портфолио
  - name: client
    description: Эндпоинты для работы с профилем заказчика и его проектами
  - name: admin
    description: Административные операции
  - name: ai
    description: AI-помощник
  - name: skills
    description: Управление навыками
  - name: categories
    description: Управление категориями
  - name: specializations
    description: Управление специализациями
  - name: rating
    description: Оценка завершённых проектов

paths:

  /auth/me:
    get:
      tags:
        - auth
      summary: Получить информацию о текущем пользователе
      description: Возвращает данные пользователя, если запрос содержит действительный JWT-токен. Если токен отсутствует или недействителен, возвращается ошибка 401
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Информация о пользователе получена успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Пользователь не аутентифицирован
        '500':
          description: Внутренняя ошибка сервера

  /auth/register:
    post:
      tags:
        - auth
      summary: Регистрация нового пользователя
      description: Регистрирует пользователя и отправляет код подтверждения на e-mail
      requestBody:
        description: Данные для регистрации
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationRequest'
      responses:
        '201':
          description: Пользователь успешно зарегистрирован, код подтверждения отправлен на e-mail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationResponse'
        '400':
          description: Неверные данные запроса

  /auth/login:
    post:
      tags:
        - auth
      summary: Вход пользователя
      description: Аутентифицирует пользователя и возвращает JWT токен
      requestBody:
        description: Учетные данные для входа
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
      responses:
        '200':
          description: Вход выполнен успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
        '401':
          description: Неверные учетные данные
        '500':
          description: Внутренняя ошибка сервера

  /auth/confirm-email:
    post:
      tags:
        - auth
      summary: Подтверждение e-mail
      description: Проверяет код подтверждения, отправленный на e-mail пользователя при регистрации
      requestBody:
        description: Данные для подтверждения почты
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmEmailRequest'
      responses:
        '200':
          description: Почта успешно подтверждена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
        '400':
          description: Неверный или просроченный код подтверждения
        '500':
          description: Внутренняя ошибка сервера

  /auth/resend-confirmation:
    post:
      tags:
        - auth
      summary: Повторная отправка кода подтверждения
      description: Удаляет старую запись и шлёт новый код, если пользователь ещё не подтвердил e-mail
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        '200':
          description: Новый код отправлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
        '400':
          description: Пользователь не найден или уже подтверждён
        '500':
          description: Внутренняя ошибка сервера

  /auth/password-reset/request:
    post:
      tags:
        - auth
      summary: Запрос на восстановление пароля
      description: Инициирует процесс восстановления пароля, отправляя 4-значный код на e-mail пользователя
      requestBody:
        description: Укажите e-mail пользователя для отправки кода восстановления
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
      responses:
        '200':
          description: Код для восстановления пароля отправлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
        '404':
          description: Пользователь с указанным e-mail не найден

  /auth/password-reset/confirm:
    post:
      tags:
        - auth
      summary: Подтверждение восстановления пароля
      description: Проверяет код восстановления и обновляет пароль пользователя
      requestBody:
        description: Данные для смены пароля
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirmRequest'
      responses:
        '200':
          description: Пароль успешно обновлён
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
        '400':
          description: Неверный или просроченный код восстановления

  /auth/logout:
    post:
      tags:
        - auth
      summary: Выход пользователя
      description: Завершает сессию пользователя. Если реализован механизм аннулирования JWT, сервер также может добавить токен в черный список.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Пользователь успешно вышел из системы
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'

  /freelancers:
    get:
      tags:
        - freelancer
      summary: Просмотр списка фрилансеров
      description: Возвращает список фрилансеров с базовой информацией
      responses:
        '200':
          description: Список фрилансеров получен успешно.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FreelancerProfile'
        '404':
          description: Фрилансеры не найдены

  /freelancers/{id}:
    get:
      tags:
        - freelancer
      summary: Получить детальную информацию о фрилансере
      description: Возвращает детальную информацию о фрилансере по его ID
      parameters:
        - name: id
          in: path
          description: ID фрилансера.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Информация о фрилансере получена успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FreelancerProfile'
        '404':
          description: Фрилансер не найден

  /profile/freelancer:
    get:
      tags:
        - freelancer
      summary: Получить профиль фрилансера
      description: Возвращает информацию профиля фрилансера
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Профиль фрилансера получен успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FreelancerProfile'
        '404':
          description: Профиль фрилансера не найден
    delete:
      tags:
        - freelancer
      summary: Удалить (деактивировать) аккаунт фрилансера
      description: Фрилансер может удалить (деактивировать) свой аккаунт. После этого аккаунт помечается как неактивный и пользователь не сможет войти в систему
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Аккаунт фрилансера успешно деактивирован.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
        '404':
          description: Аккаунт не найден
  /profile/freelancer/basic:
    put:
      tags:
        - freelancer
      summary: Обновить основные данные профиля фрилансера
      description: Обновляет основные данные профиля (требуется роль FREELANCER)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FreelancerProfileBasic'
      responses:
        '200':
          description: Основные данные обновлены успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FreelancerProfile'
        '400':
          description: Ошибка обновления основных данных
        '401':
          description: Пользователь не авторизован
        '403':
          description: Нет прав (требуется роль FREELANCER)
        '500':
          description: Внутренняя ошибка сервера
  /profile/freelancer/contact:
    put:
      tags:
        - freelancer
      summary: Обновить контактные данные профиля фрилансера
      description: Обновляет контактные данные профиля (требуется роль FREELANCER)
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FreelancerProfileContact'
      responses:
        '200':
          description: Контактные данные обновлены успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FreelancerProfile'
        '400':
          description: Ошибка обновления контактных данных
        '401':
          description: Пользователь не авторизован
        '403':
          description: Нет прав (требуется роль FREELANCER)
        '500':
          description: Внутренняя ошибка сервера
  /profile/freelancer/about:
    put:
      tags:
        - freelancer
      summary: Обновить информацию о категории, специализации, опыте и описании
      description: Обновляет информацию о категории, специализации, опыте и описании (требуется роль FREELANCER)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FreelancerProfileAbout'
      responses:
        '200':
          description: Данные о категории, специализации, опыте и описании
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FreelancerProfile'
        '400':
          description: Ошибка обновления данных о категории, специализации, опыте и описании
        '401':
          description: Пользователь не авторизован
        '403':
          description: Нет прав (требуется роль FREELANCER)
        '500':
          description: Внутренняя ошибка сервера
  /profile/freelancer/{id}:
    get:
      tags:
        - freelancer
      summary: Получить публичный профиль фрилансера
      description: Возвращает публичный профиль фрилансера по заданному идентификатору
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Аккаунт фрилансера успешно получен.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FreelancerProfile'
  /profile/freelancer/portfolio:
    get:
      tags:
        - freelancer
      summary: Получить портфолио фрилансера
      description: Возвращает список элементов портфолио для фрилансера
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Список элементов портфолио получен успешно
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FreelancerPortfolio'
    post:
      tags:
        - freelancer
      summary: Добавить новый элемент портфолио
      description: Создаёт новую запись в портфолио фрилансера
      security:
        - bearerAuth: []
      requestBody:
        description: Данные нового элемента портфолио
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FreelancerPortfolioCreate'
      responses:
        '201':
          description: Элемент портфолио создан успешно.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FreelancerPortfolio'
        '400':
          description: Ошибка создания элемента портфолио
  /profile/freelancer/portfolio/{id}:
    put:
      tags:
        - freelancer
      summary: Обновить элемент портфолио фрилансера
      description: Обновляет данные элемента портфолио
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID элемента портфолио
          required: true
          schema:
            type: integer
      requestBody:
        description: Данные для обновления элемента портфолио
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FreelancerPortfolioUpdate'
      responses:
        '200':
          description: Элемент портфолио обновлён успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FreelancerPortfolio'
        '400':
          description: Ошибка обновления элемента портфолио
    delete:
      tags:
        - freelancer
      summary: Удалить элемент портфолио фрилансера
      description: Удаляет указанный элемент портфолио
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID элемента портфолио для удаления
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Элемент портфолио удалён успешно
        '404':
          description: Элемент портфолио не найден
  /profile/freelancer/portfolio/{portfolioId}/skills:
    get:
      tags:
        - freelancer
      summary: Получить навыки элемента портфолио
      description: Возвращает список навыков для указанного элемента портфолио
      security:
        - bearerAuth: []
      parameters:
        - name: portfolioId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Список навыков получен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Skill'
        '404':
          description: Элемент портфолио не найден или не принадлежит пользователю
        '500':
          description: Внутренняя ошибка сервера
  /profile/freelancer/portfolio/{portfolioId}/skills/{skillId}:
    post:
      tags:
        - freelancer
      summary: Добавить навык к портфолио
      description: Привязывает навык к элементу портфолио фрилансера
      security:
        - bearerAuth: []
      parameters:
        - name: portfolioId
          in: path
          required: true
          schema:
            type: integer
        - name: skillId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: Навык добавлен в портфолио
        '403':
          description: Нет прав на изменение чужого портфолио
        '404':
          description: Портфолио или навык не найдены
        '500':
          description: Внутренняя ошибка сервера
    delete:
      tags:
        - freelancer
      summary: Удалить навык из портфолио
      description: Отвязывает навык от элемента портфолио фрилансера
      security:
        - bearerAuth: []
      parameters:
        - name: portfolioId
          in: path
          required: true
          schema:
            type: integer
        - name: skillId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Навык удалён из портфолио
        '403':
          description: Нет прав на изменение чужого портфолио
        '404':
          description: Портфолио или навык не найдены
        '500':
          description: Внутренняя ошибка сервера
  /profile/freelancer/skills:
    get:
      tags:
        - freelancer
      summary: Просмотр навыков
      description: Возвращает все навыки текущего фрилансера
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Навыки успешно получены
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Skill'
        '500':
          description: Внутренняя ошибка сервера
  /profile/freelancer/portfolio/public/{freelancerProfileId}:
    get:
      tags:
        - freelancer
      summary: Получить портфолио произвольного фрилансера (для клиента)
      description: Возвращает список элементов портфолио для фрилансера
      security:
        - bearerAuth: []
      parameters:
        - name: freelancerProfileId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Список элементов портфолио получен успешно
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FreelancerPortfolio'
        '401':
          description: Не авторизован или не роль CLIENT
        '404':
          description: Портфолио или навык не найдены
        '500':
          description: Внутренняя ошибка сервера
  /profile/freelancer/skills/{skillId}:
    post:
      tags:
        - freelancer
      summary: Добавить навык
      description: Добавляет указанный навык к профилю фрилансера
      security:
        - bearerAuth: []
      parameters:
        - name: skillId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Навык успешно добавлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FreelancerProfile'
        '404':
          description: Навык или профиль фрилансера не найдены
        '500':
          description: Внутренняя ошибка сервера
    delete:
      tags:
        - freelancer
      summary: Удалить навык
      description: Удаляет указанный навык из профиля фрилансера
      security:
        - bearerAuth: []
      parameters:
        - name: skillId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Навык успешно удалён
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FreelancerProfile'
        '404':
          description: Навык не найден в профиле фрилансера
        '500':
          description: Внутренняя ошибка сервера

  /clients:
    get:
      tags:
        - client
      summary: Просмотр списка клиентов
      description: Возвращает список клиентов с базовой информацией.
      responses:
        '200':
          description: Список клиентов получен успешно.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClientProfile'
        '404':
          description: Клиенты не найдены.
        '500':
          description: Внутренняя ошибка сервера

  /clients/{id}:
    get:
      tags:
        - client
      summary: Получить детальную информацию о клиенте
      description: Возвращает детальную информацию о клиенте по его ID
      parameters:
        - name: id
          in: path
          description: ID клиента
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Информация о клиенте получена успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientProfile'
        '404':
          description: Клиент не найден
        '500':
          description: Внутренняя ошибка сервера

  /client/search/freelancers:
    get:
      tags:
        - client
      summary: Поиск фрилансеров
      description: Возвращает список фрилансеров
      security:
        - bearerAuth: []
      parameters:
        - name: skills
          in: query
          schema:
            type: array
            items:
              type: integer
        - name: term
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Список фрилансеров успешно получен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FreelancerProfile'
        '400':
          description: Неверные параметры запроса
        '500':
          description: Внутренняя ошибка сервера
  /freelancer/search/projects:
    get:
      tags:
        - freelancer
      summary: Поиск проектов по навыкам и/или тексту
      description: Возвращает список проектов
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Результаты поиска проектов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        '400':
          description: Неверные параметры запроса
        '500':
          description: Внутренняя ошибка сервера

  /profile/client:
    get:
      tags:
        - client
      summary: Получить профиль заказчика
      description: Возвращает данные профиля заказчика
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Профиль заказчика получен успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientProfile'
        '404':
          description: Профиль заказчика не найден
        '500':
          description: Внутренняя ошибка сервера
    delete:
      tags:
        - client
      summary: Удалить аккаунт заказчика
      description: Удаляет аккаунт заказчика текущего пользователя
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Аккаунт успешно удален
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
        '404':
          description: Профиль не найден
        '500':
          description: Внутренняя ошибка сервера
  /profile/client/avatar:
    post:
      tags:
        - client
      summary: Загрузить аватар заказчика
      description: Позволяет заказчику загрузить аватар
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Аватар загружен успешно
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
        '404':
          description: Профиль клиента не найден
        '500':
          description: Ошибка сохранения аватара
  /profile/freelancer/avatar:
    post:
      tags:
        - freelancer
      summary: Загрузить аватар фрилансера
      description: Позволяет фрилансеру загрузить аватар
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Аватар загружен успешно
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
        '404':
          description: Профиль клиента не найден
        '500':
          description: Ошибка сохранения аватара
  /profile/client/basic:
    put:
      tags:
        - client
      summary: Обновить основные данные профиля заказчика
      description: Обновляет основные данные профиля (требуется роль CLIENT)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientProfileBasic'
      responses:
        '200':
          description: Основные данные обновлены успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientProfile'
        '400':
          description: Ошибка обновления основных данных
        '401':
          description: Пользователь не авторизован
        '403':
          description: Нет прав (требуется роль CLIENT)
        '500':
          description: Внутренняя ошибка сервера
  /profile/client/contact:
    put:
      tags:
        - client
      summary: Обновить контактные данные профиля заказчика
      description: Обновляет контактные данные профиля (требуется роль CLIENT)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientProfileContact'
      responses:
        '200':
          description: Контактные данные обновлены успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientProfile'
        '400':
          description: Ошибка обновления контактных данных
        '401':
          description: Пользователь не авторизован
        '403':
          description: Нет прав (требуется роль CLIENT)
        '500':
          description: Внутренняя ошибка сервера
  /profile/client/field:
    put:
      tags:
        - client
      summary: Обновить данные о сфере деятельности
      description: Обновляет информацию о сфере деятельности (требуется роль CLIENT)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientProfileField'
      responses:
        '200':
          description: Данные о сфере деятельности обновлены успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientProfile'
        '400':
          description: Ошибка обновления данных о сфере деятельности
        '401':
          description: Пользователь не авторизован
        '403':
          description: Нет прав (требуется роль CLIENT)
        '500':
          description: Внутренняя ошибка сервера
  /projects:
    get:
      tags:
        - client
      summary: Получить список проектов
      description: >
        Возвращает список всех проектов. При передаче query-параметра "status" возвращаются проекты с указанным статусом
        Допустимые значения статуса: open (открытые), in_progress (в работе), completed (завершённые)
      parameters:
        - name: status
          in: query
          description: Фильтр по статусу проекта.
          required: false
          schema:
            type: string
            enum: [open, in_progress, completed]
      responses:
        '200':
          description: Список проектов получен успешно
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        '404':
          description: Проекты не найдены
    post:
      tags:
        - client
      summary: Создать новый проект
      description: Клиент может создать новый проект. При создании проект получает статус "open"
      security:
        - bearerAuth: []
      requestBody:
        description: Данные нового проекта
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreate'
      responses:
        '201':
          description: Проект успешно создан.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          description: Ошибка создания проекта
  /projects/{projectId}:
    get:
      tags:
        - client
      summary: Получить проект по id
      description: Возвращает данные одного проекта"
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          description: ID проекта
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Проект успешно получен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '500':
          description: Внутренняя ошибка сервера
    put:
      tags:
        - client
      summary: Обновить проект
      description: Клиент может обновить проект, если его статус "open". Проекты в работе или завершённые редактировать нельзя
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          description: ID проекта
          required: true
          schema:
            type: integer
      requestBody:
        description: Данные для обновления проекта
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdate'
      responses:
        '200':
          description: Проект успешно обновлён
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          description: Проект нельзя обновить, так как его статус не "open"
    delete:
      tags:
        - client
      summary: Удалить проект
      description: Клиент может удалить проект, если его статус "open". Проекты в работе или завершённые удалять нельзя
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          description: ID проекта для удаления.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Проект успешно удалён.
        '400':
          description: Проект нельзя удалить, так как его статус не "open"
  /projects/client/{clientId}:
    get:
      tags:
        - client
      summary: Получить свои проекты
      description: CLIENT -> только свои
      security:
        - bearerAuth: []
      parameters:
        - name: clientId
          in: path
          description: ID клиента
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Проекты успешно получен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        '401':
          description: Не аутентифицирован
        '500':
          description: Внутренняя ошибка сервера
  /projects/{projectId}/responses:
    post:
      tags:
        - client
      summary: Откликнуться на проект
      description: Отклики на проект
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                freelancerId:
                  type: integer
      responses:
        '201':
          description: Отклик на проект успешно отправлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectApplication'
  /projects/{projectId}/invitations:
    post:
      tags:
        - client
      summary: Пригласить фрилансера
      description: Клиент отправляет приглашение фрилансеру на участие в проекте
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          description: ID проекта
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                freelancerId:
                  type: integer
      responses:
        '201':
          description: Приглашение отправлено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectApplication'
        '400':
          description: Неверные данные
        '401':
          description: Пользователь не аутентифицирован или не имеет роли CLIENT
        '404':
          description: Проект или фрилансер не найдены
        '500':
          description: Внутренняя ошибка сервера
  /projects/{projectId}/invitations/{applicationId}/status:
    patch:
      tags:
        - client
      summary: Обработать статус приглашения
      description: Фрилансер принимает или отклоняет приглашение
      security:
        - bearerAuth: [ ]
      parameters:
        - name: projectId
          in: path
          description: ID проекта
          required: true
          schema:
            type: integer
            example: 123
        - name: applicationId
          in: path
          description: ID приглашения/заявки
          required: true
          schema:
            type: integer
            example: 789
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                projectApplicationStatus:
                  type: string
                  enum: [ pending, approved, declined ]
      responses:
        '200':
          description: Статус приглашения обновлён
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectApplication'
        '400':
          description: Неверные данные или попытка обработать не‑приглашение
        '401':
          description: Пользователь не аутентифицирован или не имеет роли FREELANCER
        '404':
          description: Приглашение не найдено
        '500':
          description: Внутренняя ошибка сервера

  /projects/me:
    get:
      tags:
        - client
      summary: Получить свои проекты
      description: Возвращает проекты текущего клиента
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [open, in_progress, completed]
      responses:
        '200':
          description: Проекты успешно получены
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        '401':
          description: Пользователь не аутентифицирован
        '500':
          description: Внутренняя ошибка сервера
  /projects/drafts:
    post:
      tags:
        - project
      summary: Создать черновик проекта
      description: Создает новый черновик проекта (только для клиентов)
      operationId: createProjectDraft
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreate'
      responses:
        '201':
          description: Черновик проекта успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          description: Неверные данные для создания черновика
        '401':
          description: Неавторизованный доступ
        '403':
          description: Доступ запрещен (требуется роль CLIENT)
        '500':
          description: Внутренняя ошибка сервера
  /projects/{draftId}/draft:
    put:
      tags:
        - project
      summary: Обновить черновик проекта
      description: Обновляет существующий черновик проекта (только для клиентов)
      security:
        - bearerAuth: [ ]
      parameters:
        - name: draftId
          in: path
          description: ID черновика проекта
          required: true
          schema:
            type: integer
            example: 123
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdate'
      responses:
        '200':
          description: Черновик проекта успешно обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          description: Неверные данные для обновления
        '401':
          description: Неавторизованный доступ
        '403':
          description: Доступ запрещен (требуется роль CLIENT)
        '404':
          description: Черновик проекта не найден
        '500':
          description: Внутренняя ошибка сервера
  /projects/{draftId}/publish:
    post:
      tags:
        - project
      summary: Опубликовать черновик
      description: Публикует черновик проекта (финальное редактирование + статус → OPEN)
      security:
        - bearerAuth: [ ]
      parameters:
        - name: draftId
          in: path
          description: ID черновика проекта
          required: true
          schema:
            type: integer
            example: 123
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdate'
      responses:
        '200':
          description: Черновик успешно опубликован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          description: Неверные данные для публикации
        '401':
          description: Неавторизованный доступ
        '403':
          description: Доступ запрещен (требуется роль CLIENT)
        '404':
          description: Черновик проекта не найден
        '500':
          description: Внутренняя ошибка сервера
  /admin/auth/login:
    post:
      tags:
        - admin
        - auth
      summary: Запрос кода для входа админа
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminLoginRequest'
      responses:
        '200':
          description: Код для входа успешно отправлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
        '400':
          description: Неверные параметры запроса
        '404':
          description: Администратор не найден
  /admin/auth/confirm:
    post:
      tags:
        - admin
        - auth
      summary: Подтверждение кода и получение токена
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmAdminLoginRequest'
      responses:
        '200':
          description: Успешная аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
        '400':
          description: Неверный код подтверждения
        '401':
          description: Неверные учетные данные
  /admin/auth/refresh:
    post:
      tags:
        - admin
        - auth
      summary: Обновление токена
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
      responses:
        '200':
          description: Токен успешно обновлён
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefreshResponse'
        '500':
          description: Внутренняя ошибка сервера
  /admin/freelancers:
    get:
      tags:
        - admin
      summary: Просмотр списка фрилансеров
      description: Возвращает список всех фрилансеров с базовой информацией
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Список фрилансеров получен успешно
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FreelancerProfile'
        '401':
          description: Нет прав
        '404':
          description: Фрилансеры не найдены
        '500':
          description: Внутренняя ошибка сервера
  /admin/freelancers/{userId}:
    get:
      tags:
        - admin
      summary: Получить детальную информацию о фрилансере
      description: Возвращает детальную информацию о фрилансере по его userId
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          description: ID фрилансера
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Информация о фрилансере получена успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FreelancerProfile'
        '401':
          description: Нет прав
        '404':
          description: Фрилансер не найден
        '500':
          description: Внутренняя ошибка сервера
    delete:
      tags:
        - admin
      summary: Удалить фрилансера
      description: Удаляет профиль фрилансера по userId
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Фрилансер успешно деактивирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
        '401':
          description: Пользователь не аутентифицирован или не имеет прав
        '404':
          description: Профиль не найден
        '500':
          description: Внутренняя ошибка сервера
    put:
      tags:
        - admin
      summary: Активировать/деактивировать фрилансера
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Операция выполнена успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
        '401':
          description: Не аутентифицирован или нет прав
        '404':
          description: Фрилансер не найден
        '500':
          description: Внутренняя ошибка сервера
  /admin/freelancers/{userId}/activate:
    put:
      tags:
        - admin
      summary: Активировать фрилансера
      description: Меняет статус фрилансера на активный (isActive=true)
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Фрилансер успешно активирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
        '401':
          description: Не аутентифицирован или нет прав
        '404':
          description: Фрилансер не найден
        '500':
          description: Внутренняя ошибка сервера
  /admin/freelancers/{userId}/deactivate:
    put:
      tags:
        - admin
      summary: Деактивировать фрилансера
      description: Меняет статус фрилансера на неактивный (isActive=false)
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Фрилансер успешно деактивирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
        '401':
          description: Не аутентифицирован или нет прав
        '404':
          description: Фрилансер не найден
        '500':
          description: Внутренняя ошибка сервера
  /admin/clients:
    get:
      tags:
        - admin
      summary: Просмотр списка клиентов
      description: Возвращает список всех клиентов с базовой информацией
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Список клиентов получен успешно
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClientProfile'
        '401':
          description: Нет прав
        '404':
          description: Клиенты не найдены
        '500':
          description: Внутренняя ошибка сервера
  /admin/freelancers/{userId}/projects:
    get:
      tags:
        - admin
      summary: Получить проекты, где фрилансер является исполнителем
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Проекты успешно получены
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        '401':
          description: Нет прав
        '404':
          description: Фрилансер не найден
        '500':
          description: Ошибка сервера
  /admin/clients/{userId}:
    get:
      tags:
        - admin
      summary: Получить детальную информацию о клиенте
      description: Возвращает детальную информацию о клиенте по его ID
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          description: ID клиента
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Информация о клиенте получена успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientProfile'
        '401':
          description: Нет прав
        '404':
          description: Клиент не найден
        '500':
          description: Внутренняя ошибка сервера
    delete:
      tags:
        - admin
      summary: Удалить заказчика
      description: Удаляет профиль пользователя по userId с ролью CLIENT
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Заказчик успешно удалён
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
        '401':
          description: Пользователь не аутентифицирован или не имеет прав
        '404':
          description: Профиль не найден
        '500':
          description: Внутренняя ошибка сервера
  /admin/clients/{userId}/activate:
    put:
      tags:
        - admin
      summary: Активировать заказчика
      description: Меняет статус заказчика на активный (isActive=true)
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Заказчик успешно активирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
        '401':
          description: Не аутентифицирован или нет прав
        '404':
          description: Заказчик не найден
        '500':
          description: Внутренняя ошибка сервера
  /admin/clients/{userId}/deactivate:
    put:
      tags:
        - admin
      summary: Деактивировать заказчика
      description: Меняет статус заказчика на неактивный (isActive=false)
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Заказчик успешно деактивирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
        '401':
          description: Не аутентифицирован или нет прав
        '404':
          description: Заказчик не найден
        '500':
          description: Внутренняя ошибка сервера
  /admin/clients/{id}/projects:
    get:
      tags:
        - admin
      summary: Просмотр проектов клиента
      description: Возвращает список всех проектов, созданных указанным клиентом
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID клиента
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Список проектов клиента получен успешно
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        '401':
          description: Нет прав
        '404':
          description: Проекты для данного клиента не найдены
        '500':
          description: Внутренняя ошибка сервера
  /admin/projects:
    get:
      tags:
        - admin
      summary: Получить список всех проектов
      description: Возвращает список всех проектов в системе
      parameters:
        - $ref: '#/components/parameters/Pageable'
      responses:
        '200':
          description: Список проектов получен успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page_ProjectAdminListItem_'
        '401':
          description: Пользователь не аутентифицирован или не имеет прав
        '500':
          description: Внутренняя ошибка сервера
  /admin/users/search:
    get:
      tags:
        - admin
      summary: Поиск пользователей
      description: Поиск пользователей с фильтрами
      parameters:
        - name: term
          in: query
          description: Поисковый запрос
          required: false
          schema:
            type: string
        - name: role
          in: query
          description: Роль пользователя
          required: false
          schema:
            type: string
            enum: [client, freelancer, admin]
        - name: registeredFrom
          in: query
          description: Дата регистрации от (формат ISO 8601)
          required: false
          schema:
            type: string
            format: date-time
        - name: registeredTo
          in: query
          description: Дата регистрации до (формат ISO 8601)
          required: false
          schema:
            type: string
            format: date-time
        - $ref: '#/components/parameters/Pageable'
      responses:
        '200':
          description: Успешный поиск
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page_UserDto_'
        '400':
          description: Неверные параметры запроса
        '500':
          description: Ошибка сервера
  /admin/projects/search:
    get:
      tags:
        - admin
      summary: Поиск проектов
      description: Поиск проектов с фильтрами
      parameters:
        - name: term
          in: query
          description: Поисковый запрос
          required: false
          schema:
            type: string
        - name: status
          in: query
          description: Статус проекта
          required: false
          schema:
            type: string
        - name: createdFrom
          in: query
          description: Дата создания от (формат ISO 8601)
          required: false
          schema:
            type: string
            format: date-time
        - name: createdTo
          in: query
          description: Дата создания до (формат ISO 8601)
          required: false
          schema:
            type: string
            format: date-time
        - $ref: '#/components/parameters/Pageable'
      responses:
        '200':
          description: Успешный поиск
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page_ProjectAdminListItem_'
        '400':
          description: Неверные параметры запроса
        '500':
          description: Ошибка сервера
  /admin/portfolios:
    get:
      tags:
        - admin
      summary: Список портфолио (минимальная проекция) с пагинацией
      description: Возвращает ID, заголовок, имя/фамилию фрилансера и дату создания
      parameters:
        - $ref: '#/components/parameters/Pageable'
      responses:
        '200':
          description: Успешный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page_PortfolioAdminListItem_'
        '500':
          description: Ошибка сервера
  /admin/portfolios/search:
    get:
      tags:
        - admin
      summary: Поиск портфолио
      description: Поиск портфолио с фильтрами
      parameters:
        - name: term
          in: query
          description: Поисковый запрос
          required: false
          schema:
            type: string
        - name: freelancerName
          in: query
          description: Имя фрилансера
          required: false
          schema:
            type: string
        - name: createdFrom
          in: query
          description: Дата создания от (формат ISO 8601)
          required: false
          schema:
            type: string
            format: date-time
        - name: createdTo
          in: query
          description: Дата создания до (формат ISO 8601)
          required: false
          schema:
            type: string
            format: date-time
        - $ref: '#/components/parameters/Pageable'
      responses:
        '200':
          description: Успешный поиск
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page_PortfolioAdminListItem_'
        '400':
          description: Неверные параметры запроса
        '500':
          description: Ошибка сервера
  /admin/projects/{id}:
    get:
      tags:
        - admin
      summary: Получить детальную информацию о проекте
      description: Возвращает детальную информацию о проекте по его ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID проекта
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Информация о проекте получена успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '401':
          description: Нет прав
        '404':
          description: Проект не найден
        '500':
          description: Внутренняя ошибка сервера
    delete:
      tags:
        - admin
      summary: Удалить проект
      description: Администратор может удалить проект по его ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID проекта для удаления
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Проект успешно удалён
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
        '404':
          description: Проект не найден
  /admin/freelancers/{id}/portfolio:
    get:
      tags:
        - admin
      summary: Просмотр портфолио фрилансера
      description: Возвращает список элементов портфолио указанного фрилансера
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID фрилансера
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Список элементов портфолио получен успешно
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FreelancerPortfolio'
        '401':
          description: Нет прав
        '404':
          description: Портфолио фрилансера не найдено
        '500':
          description: Внутренняя ошибка сервера
  /admin/freelancers/{id}/portfolio/{portfolioId}:
    get:
      tags:
        - admin
      summary: Получить детальную информацию о элементе портфолио
      description: Возвращает детальную информацию о конкретном элементе портфолио фрилансера
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID фрилансера
          required: true
          schema:
            type: integer
        - name: portfolioId
          in: path
          description: ID элемента портфолио
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Информация об элементе портфолио получена успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FreelancerPortfolio'
        '401':
          description: Нет прав
        '404':
          description: Портфолио не найдено
        '500':
          description: Внутренняя ошибка сервера
    delete:
      tags:
        - admin
      summary: Удалить элемент портфолио фрилансера
      description: Удаляет указанный элемент портфолио фрилансера
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID фрилансера.
          required: true
          schema:
            type: integer
        - name: portfolioId
          in: path
          description: ID элемента портфолио для удаления
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Элемент портфолио успешно удалён
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
        '404':
          description: Элемент портфолио не найден
  /admin/portfolios/{portfolioId}:
    get:
      tags:
        - admin
      summary: Получить детальную информацию о проекте
      description: Возвращает детальную информацию о проекте по его ID
      security:
        - bearerAuth: []
      parameters:
        - name: portfolioId
          in: path
          description: ID портфолио
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Портфолио получено успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FreelancerPortfolio'
        '401':
          description: Нет прав
        '404':
          description: Портфолио не найдено
        '500':
          description: Внутренняя ошибка сервера
  /projects/{projectId}/ai/description:
    post:
      tags:
        - ai
      summary: Сгенерировать описание проекта с помощью AI
      description: >
        Генерирует детальное описание проекта на основе переданных ключевых слов или начальной идеи
        Опционально можно указать ID проекта для обновления существующего проекта
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: integer
          description: ID проекта, для которого генерируется описание
      requestBody:
        description: Данные для генерации описания проекта
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                project_id:
                  type: integer
                  example: 1
                  description: (Опционально) ID проекта, для которого требуется сгенерировать описание
                input_text:
                  type: string
                  example: "Нужно мобильное приложение для управления задачами"
                  description: Ключевые слова или краткая идея, на основе которой будет сгенерировано подробное описание
              required:
                - input_text
      responses:
        '200':
          description: Описание проекта сгенерировано успешно
          content:
            application/json:
              schema:
                type: object
                properties:
                  generated_description:
                    type: string
                    example: "Сгенерированное подробное описание проекта, включающее функциональные требования, технические детали и рекомендации по дизайну"
        '400':
          description: Ошибка генерации описания проекта
  /projects/{projectId}/skills:
    get:
      tags:
        - project
      summary: Получить список навыков проекта
      description: Возвращает все навыки указанного проекта
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          description: ID проекта
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Список навыков успешно получен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Skill'
        '401':
          description: Нет прав
        '404':
          description: Проект не найден
        '500':
          description: Внутренняя ошибка сервера
  /projects/{projectId}/skills/{skillId}:
    post:
      tags:
        - skills
      summary: Добавить навык к проекту
      description: Добавляет указанный навык к проекту (только для клиентов)
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          description: ID проекта
          required: true
          schema:
            type: integer
            example: 123
        - name: skillId
          in: path
          description: ID добавляемого навыка
          required: true
          schema:
            type: integer
            example: 456
      responses:
        '201':
          description: Навык успешно добавлен к проекту
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
        '401':
          description: Пользователь не аутентифицирован
        '403':
          description: Недостаточно прав (требуется роль CLIENT)
        '404':
          description: Проект или навык не найдены
        '500':
          description: Внутренняя ошибка сервера
    delete:
      tags:
        - skills
      summary: Удалить навык из проекта
      description: Удаляет указанный навык из проекта (только для клиентов)
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          description: ID проекта
          required: true
          schema:
            type: integer
            example: 123
        - name: skillId
          in: path
          description: ID удаляемого навыка
          required: true
          schema:
            type: integer
            example: 456
      responses:
        '204':
          description: Навык успешно удалён из проекта
        '401':
          description: Пользователь не аутентифицирован
        '403':
          description: Недостаточно прав (требуется роль CLIENT)
        '404':
          description: Проект или навык не найдены
        '500':
          description: Внутренняя ошибка сервера
  /projects/{projectId}/rating:
    get:
      tags:
        - rating
      summary: Получить оценки проекта
      description: Возвращает все оценки по указанному проекту
      security:
        - bearerAuth: [ ]
      parameters:
        - name: projectId
          in: path
          description: ID проекта
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Список оценок успешно получен"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RatingResponse'
        '401':
          description: Пользователь не авторизован
        '404':
          description: Проект не найден
        '500':
          description: Внутренняя ошибка сервера
  /projects/{projectId}/ratings:
    post:
      tags:
        - rating
      summary: Оценить проект
      description: Позволяет авторизованному CLIENT или FREELANCER выставить оценку завершённому проекту
      operationId: rateProject
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          description: ID оцениваемого проекта
          required: true
          schema:
            type: integer
            example: 123
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RatingRequest'
      responses:
        '201':
          description: Оценка успешно создана
        '400':
          description: Неверная оценка или проект не завершён
        '401':
          description: Пользователь не авторизован
        '403':
          description: Нет роли CLIENT или FREELANCER
        '404':
          description: Проект или профиль не найдены
        '500':
          description: Внутренняя ошибка сервера

  /categories:
    get:
      tags:
        - categories
      summary: Получить список категорий
      description: Возвращает список всех категорий (общедоступно)
      responses:
        '200':
          description: Список категорий получен успешно
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '404':
          description: Категории не найдены
    post:
      tags:
        - categories
      summary: Создать категорию
      description: Создает новую категорию
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '201':
          description: Категория создана успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Неверные данные для создания категории
        '500':
          description: Внутренняя ошибка сервера
  /categories/{id}:
    get:
      tags:
        - categories
      summary: Получить категорию по идентификатору
      description: Возвращает категорию по id
      parameters:
        - name: id
          in: path
          description: Идентификатор категории
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Категория получена успешно
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '404':
          description: Категории не найдены
        '500':
          description: Внутренняя ошибка сервера
    put:
      tags:
        - categories
      summary: Обновить категорию
      description: Обновляет данные категории по указанному id
      parameters:
        - name: id
          in: path
          description: Идентификатор категории
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: Категория обновлена успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Неверные данные для обновления категории
        '404':
          description: Категория не найдена
        '500':
          description: Внутренняя ошибка сервера
    delete:
      tags:
        - categories
      summary: Удалить категорию
      description: Удаляет категорию по указанному id
      parameters:
        - name: id
          in: path
          description: Идентификатор категории
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Категория успешно удалена
        '404':
          description: Категория не найдена
        '500':
          description: Внутренняя ошибка сервера
  /categories/{id}/specializations:
    get:
      tags:
        - specialization
      summary: Получить специализацию по id
      description: Возвращает специализацию, найденную по уникальному идентификатору
      parameters:
        - name: id
          in: path
          description: Идентификатор категории
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Специализация успешно получена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Specialization'
        '404':
          description: Специализация с указанным id не найдена"
        '500':
          description: Внутренняя ошибка сервера
  /skills:
    get:
      tags:
        - skills
      summary: Получить список навыков
      description: Возвращает список всех навыков (общедоступно)
      responses:
        '200':
          description: Список навыков получен успешно
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Skill'
        '404':
          description: Навыки не найдены
    post:
      tags:
        - skills
      summary: Создать новый навык
      description: Добавляет новый навык в систему
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Skill'
      responses:
        '201':
          description: Навык успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Skill'
        '400':
          description: Неверные данные для создания навыка
        '500':
          description: Внутренняя ошибка сервера

  /skills/{id}:
    get:
      tags:
        - skills
      summary: Получить навык по идентификатору
      description: Возвращает конкретный навык по его id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Навык получен успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Skill'
        '404':
          description: Навык не найден
        '500':
          description: Внутренняя ошибка сервера
    put:
      tags:
        - skills
      summary: Обновить навык
      description: Изменяет данные существующего навыка
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Skill'
      responses:
        '200':
          description: Навык успешно обновлён
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Skill'
        '400':
          description: Неверные данные для обновления
        '404':
          description: Навык не найден
        '500':
          description: Внутренняя ошибка сервера
    post:
      tags:
        - skills
      summary: Добавить навык
      description: Добавляет новый навык
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Skill'
      responses:
        '200':
          description: Навык успешно добавлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Skill'
        '400':
          description: Неверные данные для добавления
        '404':
          description: Навык не найден
        '500':
          description: Внутренняя ошибка сервера
    delete:
      tags:
        - skills
      summary: Удалить навык
      description: Удаляет навык из системы по ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Навык успешно удалён
        '404':
          description: Навык не найден
        '500':
          description: Внутренняя ошибка сервера

  /skills/autocomplete:
    get:
      tags:
        - skills
      summary: Автодополнение навыков
      description: Возвращает навыки по частичному совпадению названия
      parameters:
        - name: query
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Список совпавших навыков
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Skill'

  /dashboard/client/projects:
    get:
      tags:
        - client
      summary: Мои проекты (CLIENT)
      description: Открытые / в работе / архив
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [open, in_progress, completed]
      responses:
        '200':
          description: Список проектов успешно получен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        '401':
          description: Пользователь не аутентифицирован или не имеет роли CLIENT
        '500':
          description: Внутренняя ошибка сервера

  /dashboard/client/projects/{projectId}:
    get:
      tags:
        - client
      summary: Детали проекта (CLIENT)
      description: Описание + отклики + приглашения
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Детали проекта успешно получены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectDetail'
        '401':
          description: Пользователь не аутентифицирован или не имеет роли CLIENT
        '404':
          description: Проект не найден или не принадлежит клиенту
        '500':
          description: Внутренняя ошибка сервера

  /dashboard/freelancer/projects:
    get:
      tags:
        - freelancer
      summary: Мои проекты (FREELANCER)
      description: В работе / архив
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [open, in_progress, completed]
      responses:
        '200':
          description: Список проектов успешно получен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        '401':
          description: Пользователь не аутентифицирован или не имеет роли FREELANCER
        '500':
          description: Внутренняя ошибка сервера

  /dashboard/freelancer/responses:
    get:
      tags:
        - freelancer
      summary: Мои отклики (FREELANCER)
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, approved, declined]
      responses:
        '200':
          description: Список откликов успешно получен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectApplication'
        '401':
          description: Пользователь не аутентифицирован или не имеет роли FREELANCER
        '500':
          description: Внутренняя ошибка сервера

  /dashboard/freelancer/invitations:
    get:
      tags:
        - freelancer
      summary: Мои приглашения (FREELANCER)
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, approved, declined]
      responses:
        '200':
          description: Список приглашений успешно получен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectApplication'
        '401':
          description: Пользователь не аутентифицирован или не имеет роли FREELANCER
        '500':
          description: Внутренняя ошибка сервера

  /favorites/projects:
    get:
      tags:
        - freelancer
      summary: Список избранных проектов фрилансера
      description: Возвращает все проекты, которые текущий фрилансер добавил в избранное
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Список найденных проектов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        '401':
          description: Неавторизованный доступ
        '500':
          description: Внутренняя ошибка сервера

  /favorites/projects/{projectId}:
    post:
      tags:
        - freelancer
      summary: Добавить проект в избранное
      description: Добавляет проект в избранное текущего фрилансера
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: Проект успешно добавлен
        '400':
          description: Неверный ID проекта
        '401':
          description: Неавторизованный доступ
        '500':
          description: Внутренняя ошибка сервера
    delete:
      tags:
        - freelancer
      summary: Удалить проект из избранного
      description: Удаляет проект из избранного текущего фрилансера
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Проект успешно удалён
        '400':
          description: Неверный ID проекта
        '401':
          description: Неавторизованный доступ
        '500':
          description: Внутренняя ошибка сервера

  /favorites/freelancers:
    get:
      tags:
        - client
      summary: Список избранных фрилансеров клиента
      description: Возвращает всех фрилансеров, которых текущий клиент добавил в избранное
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Список найденных фрилансеров
          content:
            application/json:
              schema:
                type: array
                items:
                $ref: '#/components/schemas/FreelancerProfile'
        '401':
          description: Неавторизованный доступ
        '500':
          description: Внутренняя ошибка сервера

  /favorites/freelancers/{freelancerId}:
    post:
      tags:
        - client
      summary: Добавить фрилансера в избранное
      description: Добавляет фрилансера в избранное текущего клиента
      security:
        - bearerAuth: []
      parameters:
        - name: freelancerId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: Фрилансер успешно добавлен
        '400':
          description: Неверный ID фрилансера
        '401':
          description: Неавторизованный доступ
        '500':
          description: Внутренняя ошибка сервера
    delete:
      tags:
        - client
      summary: Удалить фрилансера из избранного
      description: Удаляет фрилансера из избранного текущего клиента
      security:
        - bearerAuth: []
      parameters:
        - name: freelancerId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Фрилансер успешно удалён
        '400':
          description: Неверный ID фрилансера
        '401':
          description: Неавторизованный доступ
        '500':
          description: Внутренняя ошибка сервера

  /specializations:
    get:
      tags:
        - specializations
      summary: Получить список специализаций
      description: Возвращает список всех специализаций, доступных в системе
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Список специализаций успешно получен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Specialization'
        '500':
          description: Внутренняя ошибка сервера
    post:
      tags:
        - specializations
      summary: Создать специализацию
      description: Добавляет новую специализацию в систему
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Specialization'
      responses:
        '201':
          description: Специализация успешно создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Specialization'
        '400':
          description: Неверные данные для создания
        '500':
          description: Внутренняя ошибка сервера
  /specializations/{id}:
    get:
      tags:
        - specializations
      summary: Получить специализацию по id
      description: Возвращает специализацию, найденную по уникальному идентификатору
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Специализация успешно получена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Specialization'
        '404':
          description: Специализация с указанным id не найдена
        '500':
          description: Внутренняя ошибка сервера
    put:
      tags:
        - specializations
      summary: Обновить специализацию
      description: Изменяет данные существующей специализации
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Specialization'
      responses:
        '200':
          description: Специализация успешно обновлена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Specialization'
        '400':
          description: Неверные данные для обновления
        '404':
          description: Специализация не найдена
        '500':
          description: Внутренняя ошибка сервера
    delete:
      tags:
        - specializations
      summary: Удалить специализацию
      description: Удаляет специализацию из системы по ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Специализация успешно удалена
        '404':
          description: Специализация не найдена
        '500':
          description: Внутренняя ошибка сервера

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    Pageable:
      name: pageable
      in: query
      description: Параметры пагинации
      required: false
      style: form
      explode: true
      schema:
        type: object
        properties:
          page:
            type: integer
            description: Номер страницы (0-based)
            default: 0
          size:
            type: integer
            description: Количество элементов на странице
            default: 20
          sort:
            type: string
            description: Параметры сортировки в формате `поле,направление`
            default: "createdAt,desc"

  schemas:
    AdminLoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "admin@example.com"
      required:
        - email
    ConfirmAdminLoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "admin@example.com"
        code:
          type: string
          example: "123456"
      required:
        - email
        - code
    ProjectAdminListItem:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        createdAt:
          type: string
          format: date-time
        status:
          type: string
        clientFirstName:
          type: string
        clientLastName:
          type: string

    PortfolioAdminListItem:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        createdAt:
          type: string
          format: date-time
        firstName:
          type: string
        lastName:
          type: string
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          example: "user@example.com"
        first_name:
          type: string
          example: "Иван"
        last_name:
          type: string
          example: "Иванов"
        date_birth:
          type: string
          format: date
          example: "2000-01-01"
        phone:
          type: string
          example: "79991234567"
        role:
          type: string
          enum: [client, freelancer, admin]
          example: "client"
        is_verified:
          type: boolean
          example: true
        is_active:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
    Page_ProjectAdminListItem_:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ProjectAdminListItem'
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          type: integer
        totalPages:
          type: integer
        last:
          type: boolean
        size:
          type: integer
        number:
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        first:
          type: boolean
        numberOfElements:
          type: integer
        empty:
          type: boolean
    Page_PortfolioAdminListItem_:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/PortfolioAdminListItem'
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          type: integer
        totalPages:
          type: integer
        last:
          type: boolean
        size:
          type: integer
        number:
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        first:
          type: boolean
        numberOfElements:
          type: integer
        empty:
          type: boolean
    Page_UserDto_:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/User'
        pageable:
          $ref: '#/components/schemas/PageableObject'
        totalElements:
          type: integer
        totalPages:
          type: integer
        last:
          type: boolean
        size:
          type: integer
        number:
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        first:
          type: boolean
        numberOfElements:
          type: integer
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        pageNumber:
          type: integer
        pageSize:
          type: integer
        offset:
          type: integer
        paged:
          type: boolean
        unpaged:
          type: boolean
        sort:
          $ref: '#/components/schemas/SortObject'
    SortObject:
      type: object
      properties:
        sorted:
          type: boolean
        unsorted:
          type: boolean
        empty:
          type: boolean
    PublicUser:
      type: object
      properties:
        email:
          type: string
          example: "user@example.com"
        first_name:
          type: string
          example: "Иван"
        last_name:
          type: string
          example: "Иванов"
        phone:
          type: string
          example: "79991234567"
    RegistrationRequest:
      type: object
      properties:
        email:
          type: string
          example: "user@example.com"
        password:
          type: string
          example: "SecretPassword123!"
        first_name:
          type: string
          example: "Иван"
        last_name:
          type: string
          example: "Иванов"
        phone:
          type: string
          example: "+79991234567"
        role:
          type: string
          enum: [client, freelancer, admin]
          example: "client"
      required:
        - email
        - password
        - first_name
        - last_name
        - date_birth
        - role
    RegistrationResponse:
      type: object
      properties:
        user_id:
          type: integer
          example: 1
        message:
          type: string
          example: "Регистрация успешна. Проверьте свою почту для подтверждения"
    AuthenticationRequest:
      type: object
      properties:
        email:
          type: string
          example: "user@example.com"
        password:
          type: string
          example: "SecretPassword123!"
      required:
        - email
        - password
    AuthenticationResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        user:
          $ref: '#/components/schemas/User'
    ConfirmEmailRequest:
      type: object
      properties:
        email:
          type: string
          example: "user@example.com"
        confirmation_code:
          type: string
          example: "1234"
      required:
        - email
        - confirmation_code
    PasswordResetRequest:
      type: object
      properties:
        email:
          type: string
          example: "user@example.com"
      required:
        - email
    PasswordResetConfirmRequest:
      type: object
      properties:
        email:
          type: string
          example: "user@example.com"
        reset_code:
          type: string
          example: "1234"
        new_password:
          type: string
          example: "NewSecretPassword456!"
      required:
        - email
        - reset_code
        - new_password
    TokenRefreshRequest:
      type: object
      properties:
        refreshToken:
          type: string
          example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
      required:
        - refreshToken
    TokenRefreshResponse:
      type: object
      properties:
        accessToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6..."
        refreshToken:
          type: string
          example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
        refreshTokenExpiry:
          type: string
          example: "2025-06-01T12:00:00Z"
    DefaultResponse:
      type: object
      properties:
        message:
          type: string
          example: "Операция выполнена успешно"
    ErrorResponse:
      type: object
      properties:
        status:
          type: integer
          example: 404
        message:
          type: string
          example: "Ресурс не найден"
    FreelancerProfile:
      type: object
      description: Полные данные профиля фрилансера для отображения
      properties:
        id:
          type: integer
          description: Идентификатор профиля фрилансера
          example: 1
        about:
          $ref: '#/components/schemas/FreelancerProfileAbout'
        basic:
          $ref: '#/components/schemas/FreelancerProfileBasic'
        contact:
          $ref: '#/components/schemas/FreelancerProfileContact'
        user:
          $ref: '#/components/schemas/User'
        createdAt:
          type: string
          format: date-time
          description: Дата создания профиля
          example: "2024-03-30T12:00:00"
        updatedAt:
          type: string
          format: date-time
          description: Дата последнего обновления профиля
          example: "2024-03-30T12:00:00"
        avatarUrl:
          type: string
          description: url аватарки фрилансера
        averageRating:
          type: number
          format: double
          description: Средний рейтинг фрилансера
          example: 4.5
        ratingCount:
          type: integer
          description: Количество полученных оценок
          example: 12
      required:
        - id
        - createdAt
    FreelancerProfileAbout:
      type: object
      description: Данные раздела «О себе» профиля фрилансера
      properties:
        categoryId:
          type: integer
          description: Идентификатор категории
          example: 1
        categoryName:
          type: string
          description: Название категории
          example: "Веб-разработка"
        specializationId:
          type: integer
          description: Идентификатор специализации
          example: 1
        specializationName:
          type: string
          description: Название специализации
          example: "Front-end"
        experienceLevel:
          type: string
          description: Уровень опыта работы
          example: "MIDDLE"
          enum: [BEGINNER, MIDDLE, EXPERT]
        aboutMe:
          type: string
          description: Текст о себе
          example: "Опытный разработчик с 5-летним стажем..."
          maxLength: 1000
        skills:
          type: array
          description: Список навыков фрилансера
          items:
            $ref: '#/components/schemas/Skill'
          maxItems: 5
    FreelancerProfileBasic:
      type: object
      description: Основные данные профиля фрилансера
      properties:
        country:
          type: string
          description: Страна
          example: "Россия"
        city:
          type: string
          description: Город
          example: "Москва"
        firstName:
          type: string
          example: "Иван"
        lastName:
          type: string
          example: "Иванов"
        email:
          type: string
          example: "ivan.ivanov@example.com"
        phone:
          type: string
          example: "79991234567"
    FreelancerProfileContact:
      type: object
      description: Контактные данные фрилансера
      properties:
        contactLink:
          type: string
          format: url
          description: Ссылка для связи или портфолио (только HTTPS)
          example: "https://linkedin.com/in/username"
          pattern: "^https://.*"
    FreelancerPortfolio:
      type: object
      properties:
        id:
          type: integer
          example: 1
        freelancer_id:
          type: integer
          example: 1
        title:
          type: string
          example: "Проект A"
        description:
          type: string
          example: "Описание проекта A"
        role_in_project:
          type: string
          example: "Frontend Developer"
        project_link:
          type: string
          example: "https://github.com/example/projectA"
    FreelancerPortfolioCreate:
      type: object
      properties:
        title:
          type: string
          example: "Проект A"
        description:
          type: string
          example: "Описание проекта A"
        role_in_project:
          type: string
          example: "Frontend Developer"
        project_link:
          type: string
          example: "https://github.com/example/projectA"
      required:
        - title
        - description
    FreelancerPortfolioUpdate:
      type: object
      properties:
        title:
          type: string
          example: "Проект A Updated"
        description:
          type: string
          example: "Обновлённое описание проекта A"
        role_in_project:
          type: string
          example: "Senior Frontend Developer"
        project_link:
          type: string
          example: "https://github.com/example/projectA"
    ClientProfile:
      type: object
      description: Полные данные профиля заказчика для отображения
      properties:
        id:
          type: integer
          description: Идентификатор профиля заказчика
          example: 1
        basic:
          $ref: '#/components/schemas/ClientProfileBasic'
        contact:
          $ref: '#/components/schemas/ClientProfileContact'
        field:
          $ref: '#/components/schemas/ClientProfileField'
        user:
          $ref: '#/components/schemas/User'
        createdAt:
          type: string
          format: date-time
          description: Дата создания профиля
          example: "2024-03-30T12:00:00"
        updatedAt:
          type: string
          format: date-time
          description: Дата последнего обновления профиля
          example: "2024-03-30T12:00:00"
        avatarUrl:
          type: string
          description: url аватарки клиента
        averageRating:
          type: number
          format: double
          description: Средний рейтинг клиента
          example: 4.2
        ratingCount:
          type: integer
          description: Количество полученных оценок
          example: 5
      required:
        - id
        - createdAt
    ClientProfileBasic:
      type: object
      description: Основные данные профиля заказчика
      properties:
        companyName:
          type: string
          description: Название компании
          example: "ООО Ромашка"
          maxLength: 100
        position:
          type: string
          description: Должность
          example: "Менеджер проектов"
          maxLength: 100
        country:
          type: string
          description: Страна
          example: "Россия"
        city:
          type: string
          description: Город
          example: "Москва"
        email:
          type: string
          example: "user@example.com"
        first_name:
          type: string
          example: "Иван"
        last_name:
          type: string
          example: "Иванов"
        phone:
          type: string
          example: "79991234567"
    ClientProfileContact:
      type: object
      description: Контактные данные профиля заказчика
      properties:
        contactLink:
          type: string
          format: url
          description: Ссылка для связи или на сайт компании (только HTTPS)
          example: "https://acme-corp.example.com"
          pattern: "^https://.*"
    ClientProfileField:
      type: object
      description: Информация о сфере деятельности заказчика
      properties:
        fieldDescription:
          type: string
          description: Описание сферы деятельности компании
          example: "Информационные технологии"
          maxLength: 800
    Project:
      type: object
      properties:
        id:
          type: integer
          example: 1
        client_id:
          type: integer
          example: 1
        title:
          type: string
          example: "Название проекта"
        description:
          type: string
          example: "Описание проекта..."
        category_id:
          type: integer
          example: 2
        specialization_id:
          type: integer
          example: 5
        complexity:
          type: string
          enum: [easy, medium, hard]
          example: "easy"
        payment_type:
          type: string
          enum: [hourly, fixed]
          example: "fixed"
        min_rate:
          type: number
          example: 100.0
        max_rate:
          type: number
          example: 200.0
        fixed_price:
          type: number
          example: 1500.0
        duration:
          type: string
          enum: [less_than_1_month, less_than_3_months, less_than_6_months]
          example: "1_to_3_months"
        status:
          type: string
          enum: [open, in_progress, completed]
          example: "open"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    ProjectCreate:
      type: object
      properties:
        title:
          type: string
          example: "Название проекта"
        description:
          type: string
          example: "Описание проекта..."
        category_id:
          type: integer
          example: 2
        specialization_id:
          type: integer
          example: 5
        complexity:
          type: string
          enum: [easy, medium, hard]
          example: "easy"
        payment_type:
          type: string
          enum: [hourly, fixed]
          example: "fixed"
        min_rate:
          type: number
          example: 100.0
        max_rate:
          type: number
          example: 200.0
        fixed_price:
          type: number
          example: 1500.0
        duration:
          type: string
          enum: [less_than_1_month, less_than_3_months, less_than_6_months]
          example: "1_to_3_months"
        skills:
          type: array
          description: Список идентификаторов навыков (из таблицы skills), которые требуются для проекта
          items:
            type: integer
          example: [1, 3, 5]
      required:
        - title
        - description
        - complexity
        - payment_type
        - duration
    ProjectUpdate:
      type: object
      properties:
        title:
          type: string
          example: "Обновлённое название проекта"
        description:
          type: string
          example: "Обновлённое описание проекта..."
        category_id:
          type: integer
          example: 2
        specialization_id:
          type: integer
          example: 5
        complexity:
          type: string
          enum: [easy, medium, hard]
          example: "medium"
        payment_type:
          type: string
          enum: [hourly, fixed]
          example: "hourly"
        min_rate:
          type: number
          example: 150.0
        max_rate:
          type: number
          example: 250.0
        fixed_price:
          type: number
          example: 2000.0
        duration:
          type: string
          enum: [less_than_1_month, less_than_3_months, less_than_6_months]
          example: "1_to_3_months"
    ProjectApplication:
      type: object
      properties:
        id:
          type: integer
          example: 1
        projectId:
          type: integer
          example: 1
        applicationType:
          type: string
          enum: [response, invitation]
          example: "response"
        projectApplicationStatus:
          type: string
          enum: [pending, approved, declined]
          example: "pending"
    ProjectApplicationRequest:
      type: object
      properties:
        id:
          type: integer
          example: 1
        projectId:
          type: integer
          example: 1
        applicationType:
          type: string
          enum: [response, invitation]
          example: "response"
        projectApplicationStatus:
          type: string
          enum: [pending, approved, declined]
          example: "pending"
    ProjectDetail:
      type: object
      properties:
        project:
          $ref: '#/components/schemas/Project'
        responses:
          type: array
          items:
            $ref: '#/components/schemas/ProjectApplication'
        invitations:
          type: array
          items:
            $ref: '#/components/schemas/ProjectApplication'
        clientCompleted:
          type: boolean
        freelancerCompleted:
          type: boolean
    Category:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Web Development"
    Specialization:
      type: object
      properties:
        id:
          type: integer
          example: 1
        category_id:
          type: integer
          example: 1
        name:
          type: string
          example: "Frontend Development"
    Skill:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "JavaScript"
    RatingRequest:
      type: object
      properties:
        score:
          type: integer
          example: 4
    RatingResponse:
      type: object
      properties:
        id:
          type: integer
          example: 42
        projectId:
          type: integer
          example: 1001
        raterFreelancerId:
          type: integer
          example: 7
          nullable: true
        raterClientId:
          type: integer
          example: 3
          nullable: true
        targetFreelancerId:
          type: integer
          example: 7
          nullable: true
        targetClientId:
          type: integer
          example: 3
          nullable: true
        score:
          type: integer
          example: 4
          minimum: 1
          maximum: 5
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - projectId
        - score
        - createdAt
    GenerateDescriptionRequest:
      type: object
      properties:
        systemPrompt:
          type: string
        userPrompt:
          type: string
    GenerateDescriptionResponse:
      type: object
      properties:
        generatedDescription:
          type: string